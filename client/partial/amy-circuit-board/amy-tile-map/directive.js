'use strict';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
define(['lodash', 'angular', 'app/module',
        '$bind/service',
        'defaults/service',
        'partial/tile-map/directive'
], function (_, ng, app) {
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	app.directive('amyTileMap', ['ResourceService', 'RecursionHelper', 'defaults', function (ResourceService, RecursionHelper, defaults) {


		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		var generateTileMapDefaults = defaults({
			layout:  " 'rowsOfTiles' ",
			spacing: " 2 "
		});


		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		return {
			restrict:    'E',
			replace:     true,
			templateUrl: 'partial/amy-circuit-board/amy-tile-map/view.html',
			require:     'ngModel',
			scope:       true,

			////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////

			compile: function () {
				return {
					pre: function preLink($scope, iElement, iAttrs, ngModel) {
						iElement.attr('amy-tile-map', '');

						//////////////////// Getting the model value ///////////////////////////////////////////////////

						ngModel.$render = function () {
							$scope.entity = ngModel.$modelValue;

							//////////////////// TileMap / Artefact Hierarchy //////////////////////////////////////////

							//// This artefact:
							//
							$scope.tileMap =
							$scope.artefact = {
								id:             $scope.$id,
								type:           'tileMap',
								show:           false,

								//// artefact hierarchy:
								parent:         $scope.$parent.artefact,
								children:       [],
								root:           $scope.$parent.artefact.root,

								//// which tile is maximized
								maximizedChild: null,

								//// position:
								position: null // to be set
							};


							//// Announce this artefact to its parent.
							//
							$scope.artefact.parent.children.push($scope.artefact);


							//// Remove references to this tile when it is destroyed.
							//
							$scope.$on('$destroy', function () {
								_($scope.tile.parent).pull($scope.tile);
							});


							//////////////////// Keeping Track of Tile-map Position and Size ///////////////////////////

							iAttrs.$observe('position', function (newPosition) {
								if (newPosition) {
									$scope.tileMap.position = $scope.$eval(newPosition);
								}
							});


							//////////////////// Loading sub-entities //////////////////////////////////////////////////

							$scope.entity._promise.then(function () {
								ResourceService.entities(_($scope.entity.sub).map(function (sub) {
									return sub.entity._id;
								}).value());
							});


							//////////////////// Tile-map Styling //////////////////////////////////////////////////////

							$scope.entity._promise.then(function () {
								$scope.styling = generateTileMapDefaults($scope.entity.tileMap, {});
							});

						};

					}
				}
			}

			////////////////////////////////////////////////////////////////////////////////////////////////////////////
		};
	}]);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
});/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
